{"version":3,"sources":["components/Video.js","components/Track.js","App.js","serviceWorker.js","index.js"],"names":["Video","trackId","trackLinkIdentifier","this","props","startsWith","replace","className","type","width","height","frameBorder","title","trackName","src","allowFullScreen","split","slice","scrolling","Component","Track","trackEId","href","userId","style","backgroundImage","userName","apiResponse","App","tracks","map","item","key","_id","name","uNm","uId","trackThumb","img","eId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0rUAqCeA,E,uKA/BX,IACIC,EADEC,EAAsBC,KAAKC,MAAMH,QAGvC,OAAIC,EAAoBG,WAAW,SACjCJ,EAAUC,EAAoBI,QAAQ,OAAQ,IAG5C,yBAAKC,UAAU,gBACb,4BAAQC,KAAK,YAAYC,MAAM,MAAMC,OAAO,MAAMC,YAAY,KAAKC,MAAOT,KAAKC,MAAMS,UACrFC,IAAG,wCAAmCb,GAAWc,iBAAe,MAI7Db,EAAoBG,WAAW,SAEtCJ,EAAUC,EAAoBc,MAAM,WAAW,GAAGC,MAAM,GAAI,GAG1D,yBAAKV,UAAU,gBACb,4BAAQE,MAAM,OAAOC,OAAO,MAAMQ,UAAU,KAAKP,YAAY,KAAKC,MAAOT,KAAKC,MAAMS,UACpFC,IAAG,mFAA8Eb,OAKnF,sE,GA7BYkB,aCwBLC,E,uKArBX,OACE,yBAAKb,UAAU,SACb,yBAAKA,UAAU,gBAIb,kBAAC,EAAD,CAAON,QAASE,KAAKC,MAAMiB,SAAUR,UAAWV,KAAKC,MAAMS,aAE7D,yBAAKN,UAAU,eACb,4BAAKJ,KAAKC,MAAMS,WAChB,uBAAGS,KAAI,iCAA4BnB,KAAKC,MAAMmB,QAAUhB,UAAU,oBAChE,yBAAKA,UAAU,qBACfiB,MAAO,CAACC,gBAAgB,qCAAD,OAAsCtB,KAAKC,MAAMmB,OAAjD,QACvB,yBAAKhB,UAAU,mBAAmBJ,KAAKC,MAAMsB,iB,GAfrCP,aCGdQ,EAAc,C,QA4DLC,E,uKAnBT,OACE,yBAAKrB,UAAU,aAEZoB,EAAY,GAAGE,OAAOC,KAAI,SAAAC,GAAI,OAC7B,kBAAC,EAAD,CACEC,IAAKD,EAAKE,IACVpB,UAAWkB,EAAKG,KAChBR,SAAUK,EAAKI,IACfZ,OAAQQ,EAAKK,IACbC,WAAYN,EAAKO,IACjBjB,SAAUU,EAAKQ,c,GAjDXpB,aCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.892a1d23.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Video extends Component {\n\n  render() {\n    // depending on the source platform of the track generate different track id\n    const trackLinkIdentifier = this.props.trackId;\n    let trackId;\n\n    if (trackLinkIdentifier.startsWith('/yt/')) { // Youtube source platform\n      trackId = trackLinkIdentifier.replace('/yt/', ''); // get the id only\n\n      return (\n        <div className=\"track__video\">\n          <iframe type=\"text/html\" width=\"640\" height=\"360\" frameBorder=\"no\" title={this.props.trackName} \n          src={`https://www.youtube.com/embed/${trackId}`} allowFullScreen></iframe>\n        </div>\n      );\n    } \n    else if (trackLinkIdentifier.startsWith('/sc/')) { // SoundCloud source platform\n      // get the id only (maybe this can be improved or implemented in a different way, doesn't seem reliable)\n      trackId = trackLinkIdentifier.split('tracks/')[1].slice(0, -7);\n      \n      return (\n        <div className=\"track__video\">\n          <iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameBorder=\"no\" title={this.props.trackName}\n          src={`https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${trackId}`}></iframe>\n        </div>\n      );\n    } else { // fallback for other providers as it was not implemented yet\n      return (\n        <p>The track playback is not available</p>\n      );\n    }\n  }\n}\n\nexport default Video;","import React, { Component } from 'react';\nimport Video from './Video';\n\nclass Track extends Component {\n  render() {\n    return (\n      <div className=\"track\">\n        <div className=\"track__thumb\">\n          {/* Use image thumbnail and play video via API for each of the source platforms\n          <img src={this.props.trackThumb} alt={this.props.trackName} />\n          <div className=\"track__play\"></div> */}\n          <Video trackId={this.props.trackEId} trackName={this.props.trackName} />\n        </div>\n        <div className=\"track__info\">\n          <h2>{this.props.trackName}</h2>\n          <a href={`https://openwhyd.org/u/${this.props.userId}`} className=\"track__user-info\">\n            <div className=\"track__user-avatar\" \n            style={{backgroundImage:`url(https://openwhyd.org/img/user/${this.props.userId})`}}></div>\n            <div className=\"track__username\">{this.props.userName}</div>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Track;","import React, { Component } from 'react';\nimport Track from './components/Track';\nimport data from './data/openwhyd-hot-tracks-api-response.json';\n\n//const apiEndpoint = 'https://openwhyd.org/hot?format=json';\n\nconst apiResponse = [data];\n\nclass App extends Component {\n\n  // constructor(props) {\n  //   super(props)\n  //   this.state={\n  //     error: null,\n  //     isLoaded: false,\n  //     items: []\n  //   }\n  // }\n\n  // fetch the data from the API endpoint\n  //componentDidMount() {\n    // fetch(apiEndpoint)\n    // .then(res => res.json())\n    // .then(\n    //   (result) => {\n    //     console.log(result);\n    //     this.setState({\n    //       isLoaded: true,\n    //       items: result[0].tracks\n    //     });\n    //   },\n    //   (error) => {\n    //     this.setState({\n    //       isLoaded: true,\n    //       error\n    //     });\n    //   }\n    // )\n  //}\n\n  render() {\n    // const { error, isLoaded, items } = this.state;\n    // if (error) {\n    //   return <div>Error: {error.message}</div>;\n    // } else if (!isLoaded) {\n    //   return <div>Loading...</div>;\n    // } else {\n      return (\n        <div className=\"container\">\n          {/* {items.map(item => */}\n          {apiResponse[0].tracks.map(item =>\n            <Track\n              key={item._id}\n              trackName={item.name}\n              userName={item.uNm}\n              userId={item.uId}\n              trackThumb={item.img}\n              trackEId={item.eId}\n            />    \n          )}\n        </div>\n      );\n    //}\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport \"react-app-polyfill/stable\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}